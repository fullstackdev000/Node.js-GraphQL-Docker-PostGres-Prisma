import { UnreachableCaseError } from '#veewme/lib/error'
import * as React from 'react'
import * as ReactModal from 'react-modal'
import { ToastProvider } from 'react-toast-notifications'
import styled, { createGlobalStyle } from './styled-components'
import { CustomToast, CustomToastContainer } from './toast'

const ModalContentWrapper = styled.div`
  position: relative;
  margin: 0 auto;
  padding: 36px 44px 30px;
  min-width: 300px;
  max-width: 90vw;
  min-height: 200px;
  background: #fff;
  pointer-events: auto;
  overflow: hidden;
`

const ModalTitle = styled.h2`
  padding-bottom: 20px;
  padding-right: 15px;
  margin-bottom: 30px;
  font-weight: 400;
  font-size: 19px;
  color: ${props => props.theme.colors.FIELD_TEXT};
  border-bottom: 1px solid ${props => props.theme.colors.BORDER};
`
const CloseBtnInner = styled.div`
`

const CloseBtnText = styled.label`
`

const closeBtnWidth = 26
const CloseModalBtn = styled.button.attrs({
  type: 'button'
})`
  position: absolute;
  top: 11px;
  right: 12px;
  width: ${closeBtnWidth}px;
  height: ${closeBtnWidth}px;
  background: transparent;
  font-weight: 300;
  line-height: 25px;
  text-align: center;
  border: 0 none;
  color: ${props => props.theme.colors.LABEL_TEXT};
  cursor: pointer;

  &:focus,
  &:active {
    outline: 0 none;
  }

  ${CloseBtnText} {
    font-size: 12px;
    line-height: 12px;
    transition: all .3s ease-in;
    opacity: 0;
    cursor: pointer;
    color: ${props => props.theme.colors.LABEL_TEXT};
  }

  ${CloseBtnInner} {
    width: ${closeBtnWidth}px;
    height: ${closeBtnWidth}px;

    &:before, &:after {
      position: absolute;
      content: '';
      width: ${closeBtnWidth}px;
      border-top: 1px solid ${props => props.theme.colors.LABEL_TEXT};
      left: 0;
      transition: all .3s ease-in;
    }

    &:before {
      top: 50%;
      transform: rotate(45deg);
    }

    &:after {
      top: 50%;
      transform: rotate(-45deg);
    }
  }


  &:hover {
    ${CloseBtnInner}:before,
    ${CloseBtnInner}:after {
      transform: rotate(0);
    }

    ${CloseBtnInner}:before {
      top: 0;
    }

    ${CloseBtnInner}:after {
      top: 100%;
    }

    ${CloseBtnText} {
      opacity: 1;
    }
  }
`

const GlobalStyle = createGlobalStyle`
  body {
    overflow-y: hidden;
  }

  .react-toast-notifications__container {
    top: 65px !important;
  }
`

const CloseButton: React.FC<{
  onClick: () => void
}> = props => (
  <CloseModalBtn
    onClick={props.onClick}
  >
    <CloseBtnInner>
      <CloseBtnText>close</CloseBtnText>
    </CloseBtnInner>
  </CloseModalBtn>
)
const slideTimeout = 400

interface ModalProps {
  isOpen: boolean
  onRequestClose: () => void
  className?: string
  children: React.ReactNode
  centerVertically?: boolean
  title?: string
}

const Modal: React.FunctionComponent<ModalProps> = props => {
  return (
    <ReactModal
      isOpen={props.isOpen}
      ariaHideApp={false}
      // attach class generated by styled to entire portal
      portalClassName={props.className}
      onRequestClose={(e: MouseEvent) => {
        e.stopPropagation()
        props.onRequestClose()
      }}
      closeTimeoutMS={slideTimeout}
    >
      <ToastProvider components={{ Toast: CustomToast, ToastContainer: CustomToastContainer }} placement='top-center'>
        <ModalContentWrapper>
          {props.title && (<ModalTitle>{props.title}</ModalTitle>)}
          {props.children}
          <CloseButton
            onClick={props.onRequestClose}
          />
        </ModalContentWrapper>
        <GlobalStyle />
      </ToastProvider>
    </ReactModal>
  )
}

/*
  Styling react-modal with styled-components inspired by:
  https://github.com/styled-components/styled-components/issues/1494#issuecomment-363362709
  but react-modal className and overlayClassName not customized because in such case react-modal
  ignores own default styles totally: http://reactcommunity.org/react-modal/styles/
  Some !importants are unfortunately needed.
*/
const sideModalWidthPx = 400
const sideModalTransformPx = sideModalWidthPx + 50

interface ModalStyleProps {
  showShadow?: boolean
  background?: 'DARK' | 'LIGHT' | 'NONE'
  colorTheme?: 'PAYMENT' | 'ALERT' | 'NOTE'
  fullSide?: boolean
  showBorderRadius?: boolean
}
const StyledModal = styled(Modal)<ModalProps & ModalStyleProps>`
  .ReactModal__Overlay {
    z-index: 1000;
    overflow-y: auto;
    opacity: 0;
    transition: opacity ${slideTimeout}ms;

    &--after-open {
      opacity: 1;
    }

    &--before-close {
      opacity: 0;
    }

  .ReactModal__Content {
    position: static !important;
    background: transparent !important;
    border: 0 none !important;
    padding: 0 !important;
    overflow: hidden !important;
    margin: 50px 0;
    display: flex;
    align-items: ${props => props.centerVertically ? 'center' : 'flex-start'};
    pointer-events: none;
    min-height: calc(100vh - 120px);
    transform: translateY(-100vh);
    transition: transform ${slideTimeout}ms;

    &--after-open {
      transform: translateY(0);
    }

    &--before-close {
      transform: translateY(-100vh);
    }
  }

  ${({
    background = 'LIGHT'
  }) => {
    switch (background) {
      case 'DARK':
        return `background-color: rgba(0, 0, 0, 0.5) !important;`
      case 'LIGHT':
        return `background-color: rgba(255, 255, 255, 0.6) !important;`
      case 'NONE':
        return `background-color: transparent !important;`
      default:
        throw new UnreachableCaseError(background)
    }
  }}

  ${ModalContentWrapper} {
    ${({ showShadow = true }) => showShadow && `box-shadow: 0 4px 12px 0 rgba(0, 0, 0, 0.6);`}
    ${({ showBorderRadius = false }) => showBorderRadius && `border-radius: 8px;`}

    ${({
      colorTheme,
      theme
    }) => {
      switch (colorTheme) {
        case 'ALERT':
          return `border-top: 10px solid ${theme.colors.ALERT};`
        case 'PAYMENT':
          return `border-top: 10px solid ${theme.colors.ORANGE};`
        case 'NOTE':
          return `border-top: 10px solid ${theme.colors.GREEN};`
        default:
          return `border: 0 none;`
      }
    }}
  }

  ${({
      fullSide = false,
      showBorderRadius = true
  }) => fullSide && `
    .ReactModal__Overlay {
      overflow: hidden;
    }

    .ReactModal__Content {
      position: absolute !important;
      top: 0 !important;
      right: 0 !important;
      bottom: 0 !important;
      margin: 0 !important;
      transform: none;
      border-radius: 0 !important;

      ${ModalContentWrapper} {
        position: absolute;
        top: 0;
        height: 100vh;
        right: 0;
        width: ${sideModalWidthPx}px;
        ${showBorderRadius && `border-radius: 8px 0 0 8px;`}
        transform: translateX(${sideModalTransformPx}px);
        transition: transform ${slideTimeout}ms;
      }

      &--after-open {
        transform: none;
        ${ModalContentWrapper} {
          transform: translateX(0);
        }
      }

      &--before-close {
        transform: none;
        ${ModalContentWrapper} {
          transform: translateX(${sideModalTransformPx}px);
        }
      }
    }

  `}
`

export default StyledModal
